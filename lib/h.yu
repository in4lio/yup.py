($!
	($h-begin-named)

	($extern-init,,unsigned int foo[ 4 ],,{ 0, 1, 2, 3 })
	($extern) int bar;
	($extern-c) void fn( char *a );

	($inline) int max( int a, b ) { return (( a > b ) ? a : b ); }

	($extern-c-begin)
	int fn2( void );
	($extern-c-end)

	($h-end)
)

($macro h-begin (name)
($set h-name ($upper ($name)))
#ifndef ($h-name)_H
#define ($h-name)_H

#ifdef  ($h-name)_IMPLEMENT
#define _EXT
#define _EXT_INIT( dec, init ) \
	dec = init
#define _EXT_C
#define _EXT_C_INIT( dec, init ) \
	dec = init
#define _INL
#else
#define _EXT extern
#define _EXT_INIT( dec, init ) \
	extern dec
#ifdef __cplusplus
#define _C "C"
#else
#define _C
#endif
#define _EXT_C extern _C
#define _EXT_C_INIT( dec, init ) \
	extern _C dec
#if __GNUC__ && !__GNUC_STDC_INLINE__
#define _INL extern inline
#else
#define _INL inline
#endif
#endif

#ifndef COMMA
#define COMMA   ,
#endif
)

($macro h-end ()
#undef _EXT
#undef _EXT_INIT
#undef _EXT_C
#undef _EXT_C_INIT
#undef _INL
#undef _C
#endif
)

($macro h-begin-named ()
($set h-name ($__MODULE_NAME__))
($h-begin ($__MODULE_NAME__))
)

($macro implement (name)
#define ($upper ($name))_IMPLEMENT
)

($macro implement-named ()($implement ($__MODULE_NAME__)))

($macro extern-c-begin ()
#ifdef __cplusplus
extern "C" {
#endif
)

($macro extern-c-end ()
#ifdef __cplusplus
}
#endif
)

($macro extern ()_EXT)
($macro extern-init ( dec init )_EXT_INIT( ($dec), ($replace [($init)] [,] [ COMMA ]) );)
($macro extern-c ()_EXT_C)
($macro extern-c-init ( dec init )_EXT_C_INIT( ($dec), ($replace [($init)] [,] [ COMMA ]) );)
($macro inline ()_INL)
